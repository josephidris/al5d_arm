/* Auto-generated by genmsg_cpp for file /home/joseph/catkin_ws/install/share/mk-ros-pkg/ssc32py/srv/MoveAng.srv */
#ifndef SSC32PY_SERVICE_MOVEANG_H
#define SSC32PY_SERVICE_MOVEANG_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace ssc32py
{
template <class ContainerAllocator>
struct MoveAngRequest_ {
  typedef MoveAngRequest_<ContainerAllocator> Type;

  MoveAngRequest_()
  : angle(0.0)
  , angvel(0.0)
  , timesecs(0.0)
  , endgroup(0)
  {
  }

  MoveAngRequest_(const ContainerAllocator& _alloc)
  : angle(0.0)
  , angvel(0.0)
  , timesecs(0.0)
  , endgroup(0)
  {
  }

  typedef double _angle_type;
  double angle;

  typedef double _angvel_type;
  double angvel;

  typedef float _timesecs_type;
  float timesecs;

  typedef int8_t _endgroup_type;
  int8_t endgroup;


  typedef boost::shared_ptr< ::ssc32py::MoveAngRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssc32py::MoveAngRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveAngRequest
typedef  ::ssc32py::MoveAngRequest_<std::allocator<void> > MoveAngRequest;

typedef boost::shared_ptr< ::ssc32py::MoveAngRequest> MoveAngRequestPtr;
typedef boost::shared_ptr< ::ssc32py::MoveAngRequest const> MoveAngRequestConstPtr;


template <class ContainerAllocator>
struct MoveAngResponse_ {
  typedef MoveAngResponse_<ContainerAllocator> Type;

  MoveAngResponse_()
  {
  }

  MoveAngResponse_(const ContainerAllocator& _alloc)
  {
  }


  typedef boost::shared_ptr< ::ssc32py::MoveAngResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ssc32py::MoveAngResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct MoveAngResponse
typedef  ::ssc32py::MoveAngResponse_<std::allocator<void> > MoveAngResponse;

typedef boost::shared_ptr< ::ssc32py::MoveAngResponse> MoveAngResponsePtr;
typedef boost::shared_ptr< ::ssc32py::MoveAngResponse const> MoveAngResponseConstPtr;

struct MoveAng
{

typedef MoveAngRequest Request;
typedef MoveAngResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct MoveAng
} // namespace ssc32py

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ssc32py::MoveAngRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ssc32py::MoveAngRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ssc32py::MoveAngRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a05845d030e4d7c42417ef3fdbe87bd5";
  }

  static const char* value(const  ::ssc32py::MoveAngRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xa05845d030e4d7c4ULL;
  static const uint64_t static_value2 = 0x2417ef3fdbe87bd5ULL;
};

template<class ContainerAllocator>
struct DataType< ::ssc32py::MoveAngRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssc32py/MoveAngRequest";
  }

  static const char* value(const  ::ssc32py::MoveAngRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssc32py::MoveAngRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "float64 angle\n\
float64 angvel\n\
float32 timesecs\n\
int8 endgroup\n\
\n\
";
  }

  static const char* value(const  ::ssc32py::MoveAngRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssc32py::MoveAngRequest_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::ssc32py::MoveAngResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::ssc32py::MoveAngResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::ssc32py::MoveAngResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::ssc32py::MoveAngResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::ssc32py::MoveAngResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssc32py/MoveAngResponse";
  }

  static const char* value(const  ::ssc32py::MoveAngResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::ssc32py::MoveAngResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
\n\
";
  }

  static const char* value(const  ::ssc32py::MoveAngResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::ssc32py::MoveAngResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssc32py::MoveAngRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.angle);
    stream.next(m.angvel);
    stream.next(m.timesecs);
    stream.next(m.endgroup);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveAngRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::ssc32py::MoveAngResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct MoveAngResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<ssc32py::MoveAng> {
  static const char* value() 
  {
    return "a05845d030e4d7c42417ef3fdbe87bd5";
  }

  static const char* value(const ssc32py::MoveAng&) { return value(); } 
};

template<>
struct DataType<ssc32py::MoveAng> {
  static const char* value() 
  {
    return "ssc32py/MoveAng";
  }

  static const char* value(const ssc32py::MoveAng&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ssc32py::MoveAngRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a05845d030e4d7c42417ef3fdbe87bd5";
  }

  static const char* value(const ssc32py::MoveAngRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ssc32py::MoveAngRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssc32py/MoveAng";
  }

  static const char* value(const ssc32py::MoveAngRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<ssc32py::MoveAngResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "a05845d030e4d7c42417ef3fdbe87bd5";
  }

  static const char* value(const ssc32py::MoveAngResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<ssc32py::MoveAngResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ssc32py/MoveAng";
  }

  static const char* value(const ssc32py::MoveAngResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // SSC32PY_SERVICE_MOVEANG_H

